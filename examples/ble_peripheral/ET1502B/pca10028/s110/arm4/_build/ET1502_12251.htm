<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\ET1502_12251.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\ET1502_12251.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Dec 25 16:27:05 2015
<BR><P>
<H3>Maximum Stack Usage =       1544 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_loop &rArr; sensor_INT_enable_check &rArr; app_event_g_sensor_intr1_handler &rArr; gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SysTick_Handler</a><BR>
 <LI><a href="#[d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5c]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[5b]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[152]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[154]">sm_state_change</a><BR>
 <LI><a href="#[154]">sm_state_change</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a8]">cmd_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[12]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from nrf_drv_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from nrf_drv_timer.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">UART0_IRQHandler</a> from etsimple_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from et_nrf_drv_wdt.o(i.WDT_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[24]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[53]">app_event_g_sensor_intr1_handler</a> from gsensor.o(i.app_event_g_sensor_intr1_handler) referenced from usr_task.o(.constdata)
 <LI><a href="#[55]">app_gSensor_nomotion_timer_handler</a> from sleep_record.o(i.app_gSensor_nomotion_timer_handler) referenced from usr_task.o(.constdata)
 <LI><a href="#[54]">app_sleep_record_timer_handler</a> from sleep_record.o(i.app_sleep_record_timer_handler) referenced from usr_task.o(.constdata)
 <LI><a href="#[56]">auto_send_sport_record_to_app_timer</a> from data_transfer.o(i.auto_send_sport_record_to_app_timer) referenced from usr_task.o(.constdata)
 <LI><a href="#[29]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[3b]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 5 times from bsp.o(.constdata)
 <LI><a href="#[32]">bsp_event_handler</a> from main.o(i.bsp_event_handler) referenced from main.o(i.main)
 <LI><a href="#[2b]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[34]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[4f]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4e]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[27]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[2f]">device_manager_evt_handler</a> from main.o(i.device_manager_evt_handler) referenced from main.o(i.device_manager_init)
 <LI><a href="#[37]">dfu_app_on_dfu_evt</a> from dfu_app_handler.o(i.dfu_app_on_dfu_evt) referenced from main.o(i.services_init)
 <LI><a href="#[0]">dfu_app_reset_prepare</a> from dfu_app_handler.o(i.dfu_app_reset_prepare) referenced 2 times from dfu_app_handler.o(.data)
 <LI><a href="#[30]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[46]">gattc_context_apply</a> from device_manager_peripheral.o(i.gattc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[42]">gattc_context_load</a> from device_manager_peripheral.o(i.gattc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3e]">gattc_context_store</a> from device_manager_peripheral.o(i.gattc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[45]">gatts_context_apply</a> from device_manager_peripheral.o(i.gatts_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[41]">gatts_context_load</a> from device_manager_peripheral.o(i.gatts_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3d]">gatts_context_store</a> from device_manager_peripheral.o(i.gatts_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[47]">gattsc_context_apply</a> from device_manager_peripheral.o(i.gattsc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[43]">gattsc_context_load</a> from device_manager_peripheral.o(i.gattsc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3f]">gattsc_context_store</a> from device_manager_peripheral.o(i.gattsc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[26]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[51]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[36]">new_serve_nus_data_handler</a> from main.o(i.new_serve_nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[44]">no_service_context_apply</a> from device_manager_peripheral.o(i.no_service_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[40]">no_service_context_load</a> from device_manager_peripheral.o(i.no_service_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3c]">no_service_context_store</a> from device_manager_peripheral.o(i.no_service_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[35]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[25]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[33]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[38]">reset_prepare</a> from main.o(i.reset_prepare) referenced from main.o(i.services_init)
 <LI><a href="#[57]">send_data_timeout_timer</a> from data_transfer.o(i.send_data_timeout_timer) referenced from usr_task.o(.constdata)
 <LI><a href="#[39]">softdevice_assertion_handler</a> from softdevice_handler.o(i.softdevice_assertion_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[4a]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4c]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4b]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[48]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[49]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2c]">storage_operation_dummy_handler</a> from device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[4d]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2a]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[3a]">system_time_tick</a> from sys_time.o(i.system_time_tick) referenced from sys_time.o(i.system_time_init)
 <LI><a href="#[50]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[23]">timer_pwm_event_handler</a> from etmotor.o(i.timer_pwm_event_handler) referenced from etmotor.o(i.ETTimer1Init)
 <LI><a href="#[28]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[58]">usr_clock_time_unit_handler</a> from etalarm.o(i.usr_clock_time_unit_handler) referenced from usr_task.o(.constdata)
 <LI><a href="#[52]">usr_timer_handler</a> from gsensor.o(i.usr_timer_handler) referenced from usr_task.o(.constdata)
 <LI><a href="#[31]">wdt_event_handler</a> from et_wdt.o(i.wdt_event_handler) referenced from et_wdt.o(i.et_WDT_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[24d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[24e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[24f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[250]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5b]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[5c]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[197]"></a>__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bootloader_util.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isleap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_read_once
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryPercent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_distance
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_calorie
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arth_init_person_info
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaks_valleys_final_match
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaksValleys_mergeArray_arrange
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRProcess
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arthmetic_get_total_calorie
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_add_xyzData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_calorie
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arth_init_person_info
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoothfunc
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
</UL>

<P><STRONG><a name="[253]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_set_address
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_userInfo_from_app
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_info
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaksValleys_mergeArray_arrange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_transfer_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SetAlarm
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_infos_from_flash_first_page
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_pools
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cos_ver_ans_handle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_ans_handle
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[254]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaks_valleys_Merge
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaksValleys_mergeArray_arrange
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_arithmetic_buf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_display_buff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_display_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_block_reset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_pools
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_rev_char_add
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_pkt_char_add
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ctrl_pt_add
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_tx_char_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_rx_char_add
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_display_buff
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_histy_sport_record_to_app_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_infos_from_flash_first_page
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_val_to_cos
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_KeyVersion
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HWVersion
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_COSVersion
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
</UL>

<P><STRONG><a name="[11a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_userInfo_from_app
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_data_partition_refresh
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[258]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[25a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>ASCII_GetData</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, gt24l16m1y20.o(i.ASCII_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ASCII_GetData &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
</UL>

<P><STRONG><a name="[74]"></a>Arithmetic_Set_YAxis_Min_Threshold</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arithmetic.o(i.Arithmetic_Set_YAxis_Min_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Arithmetic_Set_YAxis_Min_Threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoCharGetShort
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_gsensor_cfg_judge
</UL>

<P><STRONG><a name="[93]"></a>Charge_full_detect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, et_battery.o(i.Charge_full_detect))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
</UL>

<P><STRONG><a name="[7a]"></a>Check_RSSI_display</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.Check_RSSI_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = Check_RSSI_display &rArr; display_Rssi_distance &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lastDisplayTag
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Rssi
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[241]"></a>Clr_Cos_Ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol.o(i.Clr_Cos_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
</UL>

<P><STRONG><a name="[7f]"></a>DbgPrintf</STRONG> (Thumb, 30 bytes, Stack size 280 bytes, et_debug.o(i.DbgPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Rssi
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Rssi_stop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_distance
</UL>

<P><STRONG><a name="[82]"></a>DbgPrintf_COS_log</STRONG> (Thumb, 84 bytes, Stack size 288 bytes, et_debug.o(i.DbgPrintf_COS_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DbgPrintf_COS_log &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstringbuff
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[84]"></a>Dislay_Test_LCD</STRONG> (Thumb, 118 bytes, Stack size 144 bytes, etlcddisplayapp.o(i.Dislay_Test_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Dislay_Test_LCD &rArr; lcd_power_control &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lastDisplayTag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_StrCanDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[89]"></a>DisplayKeyState</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.DisplayKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = DisplayKeyState &rArr; display_up_page &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_to_cos
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_up_page
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_down_page
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[a5]"></a>Display_delay_check</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.Display_delay_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Display_delay_check &rArr; Get_Rssi_stop &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Rssi_stop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[a0]"></a>Display_idle_logo</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, etlcddisplayapp.o(i.Display_idle_logo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Display_idle_logo &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lastDisplayTag
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arthmetic_get_total_steps
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_StrCanDisplay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[a7]"></a>ETTimer1Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, etmotor.o(i.ETTimer1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ETTimer1Init &rArr; nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_us_to_ticks
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[ab]"></a>ETTimer2Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ke_timer.o(i.ETTimer2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETTimer2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_usr_using_timer_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[244]"></a>FourCharGetInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common_arithmetic.o(i.FourCharGetInt))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_add_xyzData
</UL>

<P><STRONG><a name="[211]"></a>GB18030_16_GetData</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, gt24l16m1y20.o(i.GB18030_16_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GB18030_16_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>GPIO_Spi_MISO_high</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, et_spi_gpio.o(i.GPIO_Spi_MISO_high))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
</UL>

<P><STRONG><a name="[1e9]"></a>GPIO_Spi_MISO_low</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, et_spi_gpio.o(i.GPIO_Spi_MISO_low))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
</UL>

<P><STRONG><a name="[1ec]"></a>GPIO_Spi_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, et_spi_gpio.o(i.GPIO_Spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashInit
</UL>

<P><STRONG><a name="[91]"></a>Get_BatteryPercent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, et_battery.o(i.Get_BatteryPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_BatteryPercent &rArr; battery_adc_read_once &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_read_once
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[9a]"></a>Get_COSVersion</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, etversion.o(i.Get_COSVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_COSVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
</UL>

<P><STRONG><a name="[105]"></a>Get_COS_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartprotocol.o(i.Get_COS_status))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[101]"></a>Get_Cos_Ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartprotocol.o(i.Get_Cos_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[99]"></a>Get_HWVersion</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, etversion.o(i.Get_HWVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_HWVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
</UL>

<P><STRONG><a name="[b2]"></a>Get_KeyVersion</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, etversion.o(i.Get_KeyVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_KeyVersion &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[9b]"></a>Get_Rssi_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.Get_Rssi_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Get_Rssi_stop &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
</UL>

<P><STRONG><a name="[b3]"></a>Get_app_usr_info</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, data_transfer.o(i.Get_app_usr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Get_app_usr_info &rArr; Protocol_send_usr_info &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_userInfo_from_app
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_usr_info
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[9c]"></a>Get_lastDisplayTag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etlcddisplayapp.o(i.Get_lastDisplayTag))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lastDisplayTag
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_StrCanDisplay
</UL>

<P><STRONG><a name="[b4]"></a>Get_userInfo_from_app</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, arithmetic_data_manger.o(i.Get_userInfo_from_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_userInfo_from_app
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_app_usr_info
</UL>

<P><STRONG><a name="[bd]"></a>Init_SleepArithmetic</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep_record.o(i.Init_SleepArithmetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Init_SleepArithmetic &rArr; app_sleep_gsensor_cfg_judge &rArr; gSensor_set_duration_and_threshold &rArr; LIS3DH_SetInt1Threshold &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_gsensor_cfg_judge
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[157]"></a>IntSetFourChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common_arithmetic.o(i.IntSetFourChar))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
</UL>

<P><STRONG><a name="[247]"></a>IntSetThreeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common_arithmetic.o(i.IntSetThreeChar))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
</UL>

<P><STRONG><a name="[c2]"></a>LCD_init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, etlcddisplayapp.o(i.LCD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = LCD_init &rArr; Display_idle_logo &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[c7]"></a>LIS3DH_FIFOModeEnable</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_FIFOModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS3DH_FIFOModeEnable &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Clear_Fifo_Data
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[ca]"></a>LIS3DH_GetFifoSourceReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_GetFifoSourceReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS3DH_GetFifoSourceReg &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
</UL>

<P><STRONG><a name="[cb]"></a>LIS3DH_GetInt1Src</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_GetInt1Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS3DH_GetInt1Src &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
</UL>

<P><STRONG><a name="[cc]"></a>LIS3DH_GetWHO_AM_I</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_GetWHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LIS3DH_GetWHO_AM_I &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[cd]"></a>LIS3DH_Get_XYZ_Raw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_Get_XYZ_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LIS3DH_Get_XYZ_Raw &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gSensor_nomotion_timer_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
</UL>

<P><STRONG><a name="[cf]"></a>LIS3DH_HPFAOI1Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_HPFAOI1Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_HPFAOI1Enable &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d0]"></a>LIS3DH_SetFullScale</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetFullScale &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d1]"></a>LIS3DH_SetInt1Duration</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_SetInt1Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LIS3DH_SetInt1Duration &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_set_duration_and_threshold
</UL>

<P><STRONG><a name="[d2]"></a>LIS3DH_SetInt1Pin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetInt1Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetInt1Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_FWM_Interrupt_Enable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_Enable
</UL>

<P><STRONG><a name="[d3]"></a>LIS3DH_SetInt1Threshold</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_SetInt1Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LIS3DH_SetInt1Threshold &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_set_duration_and_threshold
</UL>

<P><STRONG><a name="[d4]"></a>LIS3DH_SetInt2Pin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetInt2Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetInt2Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d5]"></a>LIS3DH_SetIntConfiguration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetIntConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetIntConfiguration &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_config
</UL>

<P><STRONG><a name="[d6]"></a>LIS3DH_SetIntMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetIntMode &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d7]"></a>LIS3DH_SetMode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetMode &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d8]"></a>LIS3DH_SetODR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetODR &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[d9]"></a>LIS3DH_SetTriggerInt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetTriggerInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetTriggerInt &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[da]"></a>LIS3DH_SetWaterMark</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_SetWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LIS3DH_SetWaterMark &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[8a]"></a>MotorCtr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, etmotor.o(i.MotorCtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MotorCtr &rArr; display_check_to_clear_Screen &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVibrate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[1be]"></a>MotorInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, etmotor.o(i.MotorInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[e7]"></a>MotorVibrate</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, etmotor.o(i.MotorVibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MotorVibrate &rArr; MotorCtr &rArr; display_check_to_clear_Screen &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
</UL>

<P><STRONG><a name="[9e]"></a>Protocol_CMD_FIND_AG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_CMD_FIND_AG))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_CMD_FIND_AG &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[ef]"></a>Protocol_COSData_2_AG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_COSData_2_AG))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_COSData_2_AG &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[7c]"></a>Protocol_check_BT_connected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btprotocol.o(i.Protocol_check_BT_connected))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RSSI_display
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_state
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_COSData_2_AG
</UL>

<P><STRONG><a name="[f4]"></a>Protocol_data_manage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, btprotocol.o(i.Protocol_data_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = Protocol_data_manage &rArr; protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_BT_connected
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[ee]"></a>Protocol_data_to_AG</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, btprotocol.o(i.Protocol_data_to_AG))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_data_to_AG
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_packed_data
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Clr_TX_complete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Datacheck
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_Live_to_app
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_CMD_FIND_AG
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_GetAlarm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_usr_info
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_sport_data_to_ag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_histry_sport_data_to_ag
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_COSData_2_AG
</UL>

<P><STRONG><a name="[10b]"></a>Protocol_send_histry_sport_data_to_ag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_send_histry_sport_data_to_ag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_send_histry_sport_data_to_ag &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_histy_sport_record_to_app_timer
</UL>

<P><STRONG><a name="[10c]"></a>Protocol_send_sport_data_to_ag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_send_sport_data_to_ag))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_send_sport_data_to_ag &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
</UL>

<P><STRONG><a name="[b5]"></a>Protocol_send_usr_info</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_send_usr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_send_usr_info &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_app_usr_info
</UL>

<P><STRONG><a name="[10d]"></a>Protocol_set_BT_Disconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_set_BT_Disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_set_BT_Disconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_clr_COSdata
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[f6]"></a>Protocol_set_BT_connected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, btprotocol.o(i.Protocol_set_BT_connected))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_Protocol_data_manage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_manage
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[22f]"></a>Protocol_set_TX_complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btprotocol.o(i.Protocol_set_TX_complete))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[226]"></a>Protocol_set_notify</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, btprotocol.o(i.Protocol_set_notify))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_nus_on_ble_evt
</UL>

<P><STRONG><a name="[17]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI0_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SWI0_IRQHandler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>SaveEveryDayHistySport_Data_info2_datamanger</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, data_manger.o(i.SaveEveryDayHistySport_Data_info2_datamanger))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SaveEveryDayHistySport_Data_info2_datamanger &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_block
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
</UL>

<P><STRONG><a name="[97]"></a>SetPageColume</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, etlcddisplayapp.o(i.SetPageColume))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
</UL>

<P><STRONG><a name="[202]"></a>SetToGetKEYID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uartprotocol.o(i.SetToGetKEYID))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[1dc]"></a>Set_lastDisplayTag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etlcddisplayapp.o(i.Set_lastDisplayTag))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
</UL>

<P><STRONG><a name="[158]"></a>ShortSetTwoChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, common_arithmetic.o(i.ShortSetTwoChar))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_xDataSect_SameCal
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
</UL>

<P><STRONG><a name="[13f]"></a>Sleep_Add_Interval_Steps</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sleep_record.o(i.Sleep_Add_Interval_Steps))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>

<P><STRONG><a name="[1e8]"></a>SpiReadByte</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, et_spi_gpio.o(i.SpiReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[1ed]"></a>SpiSentByte</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, et_spi_gpio.o(i.SpiSentByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SpiSentByte
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>

<P><STRONG><a name="[1e7]"></a>SpiSent_1Byte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, et_spi_gpio.o(i.SpiSent_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiSent_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashWriteEnable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER0_IRQHandler &rArr; nrf_drv_timer_interrupt_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_interrupt_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; nrf_drv_timer_interrupt_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_interrupt_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER2_IRQHandler &rArr; nrf_drv_timer_interrupt_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_interrupt_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TwoCharGetShort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common_arithmetic.o(i.TwoCharGetShort))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arithmetic_Set_YAxis_Min_Threshold
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_gsensor_write_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_add_xyzData
</UL>

<P><STRONG><a name="[120]"></a>U2G</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, gt24l16m1y20.o(i.U2G))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = U2G &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gbk_code
</UL>

<P><STRONG><a name="[9]"></a>UART0_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, etsimple_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>USB_detect</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, et_battery.o(i.USB_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_state
</UL>

<P><STRONG><a name="[1c1]"></a>USB_detect_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, et_battery.o(i.USB_detect_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[206]"></a>UartRecv</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, etsimple_uart.o(i.UartRecv))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_data
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cos_data_timeout
</UL>

<P><STRONG><a name="[19f]"></a>Uart_open_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, etsimple_uart.o(i.Uart_open_check))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstringbuff
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_resend_tag
</UL>

<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, et_nrf_drv_wdt.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25f]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[260]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[261]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[80]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf_COS_log
</UL>

<P><STRONG><a name="[70]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[72]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrl_pt_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_CheckMenuMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arth_init_person_info
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_battery_icon
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[262]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[263]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[264]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[130]"></a>alarm_init</STRONG> (Thumb, 198 bytes, Stack size 136 bytes, etalarm.o(i.alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = alarm_init &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[131]"></a>analyse_display_data</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, etmultipagedisplay.o(i.analyse_display_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = analyse_display_data
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_complete_handle
</UL>

<P><STRONG><a name="[132]"></a>ans_work_state_handle</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, uartprotocol.o(i.ans_work_state_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ans_work_state_handle &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_resend_tag
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_state
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packed_data_frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>

<P><STRONG><a name="[139]"></a>app_arithmetic_store_steps</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, arithmetic_data_manger.o(i.app_arithmetic_store_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_arithmetic_store_steps &rArr; app_arithmetic_save_sportinfo &rArr; steps_2_distance &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
</UL>

<P><STRONG><a name="[142]"></a>app_arthmetic_get_total_calorie</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arithmetic_data_manger.o(i.app_arthmetic_get_total_calorie))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_arthmetic_get_total_calorie &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
</UL>

<P><STRONG><a name="[1dd]"></a>app_arthmetic_get_total_distance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arithmetic_data_manger.o(i.app_arthmetic_get_total_distance))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
</UL>

<P><STRONG><a name="[a6]"></a>app_arthmetic_get_total_steps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arithmetic_data_manger.o(i.app_arthmetic_get_total_steps))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
</UL>

<P><STRONG><a name="[143]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[145]"></a>app_button_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[79]"></a>app_error_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_context_load
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_set_address
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer1Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>app_event_g_sensor_intr1_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gsensor.o(i.app_event_g_sensor_intr1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = app_event_g_sensor_intr1_handler &rArr; gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_step_arithmetic_cal
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_slope_check
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_Enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetInt1Src
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetFifoSourceReg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_INT_enable_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>app_gSensor_nomotion_timer_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sleep_record.o(i.app_gSensor_nomotion_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_gSensor_nomotion_timer_handler &rArr; LIS3DH_Get_XYZ_Raw &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_add_xyzData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_Get_XYZ_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>app_get_pedometer_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_arithmetic.o(i.app_get_pedometer_state))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
</UL>

<P><STRONG><a name="[54]"></a>app_sleep_record_timer_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sleep_record.o(i.app_sleep_record_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = app_sleep_record_timer_handler &rArr; app_sleep_store_item_end_info &rArr; write_data_item_2_mem_pool &rArr; flush_mem_poll2flash &rArr; ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_end_info
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_gsensor_cfg_judge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>app_start_step_arithmetic_cal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, app_arithmetic.o(i.app_start_step_arithmetic_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_start_step_arithmetic_cal &rArr; gSensor_FWM_Interrupt_Enable &rArr; LIS3DH_SetInt1Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_FWM_Interrupt_Enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Clear_Fifo_Data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_arithmetic_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
</UL>

<P><STRONG><a name="[13b]"></a>app_stop_step_arithmetic_cal</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_arithmetic.o(i.app_stop_step_arithmetic_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_once_interval_max_steps
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_FWM_Interrupt_Enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Clear_Fifo_Data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_store_steps
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_arithmetic_buf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_pedometer_state
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
</UL>

<P><STRONG><a name="[149]"></a>app_timer_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_init
</UL>

<P><STRONG><a name="[15f]"></a>app_timer_init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>app_timer_start</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_init
</UL>

<P><STRONG><a name="[166]"></a>app_timer_stop</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[16a]"></a>arithmetic_write_data2buf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_arithmetic.o(i.arithmetic_write_data2buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_transfer_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_gsensor_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
</UL>

<P><STRONG><a name="[16c]"></a>auto_send_histy_sport_record_to_app_timer</STRONG> (Thumb, 186 bytes, Stack size 288 bytes, data_transfer.o(i.auto_send_histy_sport_record_to_app_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = auto_send_histy_sport_record_to_app_timer &rArr; Protocol_send_histry_sport_data_to_ag &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_histry_sport_data_to_ag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_connect_status
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[16e]"></a>auto_send_sport_Live_to_app</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, btprotocol.o(i.auto_send_sport_Live_to_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = auto_send_sport_Live_to_app &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[56]"></a>auto_send_sport_record_to_app_timer</STRONG> (Thumb, 198 bytes, Stack size 280 bytes, data_transfer.o(i.auto_send_sport_record_to_app_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = auto_send_sport_record_to_app_timer &rArr; Protocol_send_sport_data_to_ag &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_sport_data_to_ag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ble_connect_status
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_auto_send_data_to_app_status
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_block
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_manger_set_previous_head
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_timeout_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>battery_adc_dev_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, et_battery.o(i.battery_adc_dev_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[b1]"></a>battery_adc_read_once</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, et_battery.o(i.battery_adc_read_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = battery_adc_read_once &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryPercent
</UL>

<P><STRONG><a name="[171]"></a>battery_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, et_battery.o(i.battery_start))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_read_once
</UL>

<P><STRONG><a name="[172]"></a>ble_advdata_set</STRONG> (Thumb, 90 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[12f]"></a>ble_advertising_init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[174]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[176]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[177]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[175]"></a>ble_advertising_start</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[17b]"></a>ble_conn_params_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[17e]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_stop &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[17f]"></a>ble_dfu_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_dfu_init &rArr; dfu_rev_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_rev_char_add
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_pkt_char_add
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_ctrl_pt_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[183]"></a>ble_dfu_on_ble_evt</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ble_dfu.o(i.ble_dfu_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_dfu_on_ble_evt &rArr; on_ctrl_pt_write &rArr; ble_dfu_response_send
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[1d1]"></a>ble_dfu_response_send</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_response_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dfu_response_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrl_pt_write
</UL>

<P><STRONG><a name="[18a]"></a>ble_nus_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[187]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[19e]"></a>ble_nus_string_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_to_AG
</UL>

<P><STRONG><a name="[191]"></a>bond_data_load</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bond_data_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[196]"></a>bootloader_util_app_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bootloader_util.o(i.bootloader_util_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bootloader_util_app_start
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
</UL>

<P><STRONG><a name="[198]"></a>bsp_btn_ble_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_btn_ble_init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>bsp_btn_ble_on_ble_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_btn_ble.o(i.bsp_btn_ble_on_ble_evt))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[199]"></a>bsp_button_is_pressed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[32]"></a>bsp_event_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bsp_event_handler &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_switch_val
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[19c]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[22e]"></a>bsp_indication_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[19b]"></a>bsp_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>bt_send_to_AG</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.bt_send_to_AG))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_ble_nus_string_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_data_to_AG
</UL>

<P><STRONG><a name="[8b]"></a>check_LCDDispCanChange</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, etlcddisplayapp.o(i.check_LCDDispCanChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_LCDDispCanChange
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
</UL>

<P><STRONG><a name="[7b]"></a>check_lastDisplayTag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, etlcddisplayapp.o(i.check_lastDisplayTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_lastDisplayTag
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RSSI_display
</UL>

<P><STRONG><a name="[e3]"></a>check_uart_resend_tag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uartprotocol.o(i.check_uart_resend_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = check_uart_resend_tag &rArr; uart_resend_to_cos &rArr; send_key_val_to_cos &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_open_check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[c6]"></a>clear_AllScreen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, etlcddisplayapp.o(i.clear_AllScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_AllScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[1a6]"></a>clock_alarm_check</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, etalarm.o(i.clock_alarm_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = clock_alarm_check &rArr; SaveEveryDayHistySport_Data_info2_datamanger &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_day_sec_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_clock_time_unit_handler
</UL>

<P><STRONG><a name="[1ad]"></a>copy_display_data_to_buff</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, etmultipagedisplay.o(i.copy_display_data_to_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = copy_display_data_to_buff &rArr; free_display_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_display_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_changeline_handle
</UL>

<P><STRONG><a name="[ec]"></a>cos_clear_buff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uartprotocol.o(i.cos_clear_buff))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>

<P><STRONG><a name="[102]"></a>cos_send_string</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uartprotocol.o(i.cos_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstringbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_to_cos
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_val_to_cos
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cos_ver_req
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_req
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[170]"></a>data_manger_set_previous_head</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, data_manger.o(i.data_manger_set_previous_head))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mem_poll2flash
</UL>

<P><STRONG><a name="[137]"></a>deal_raw_data</STRONG> (Thumb, 276 bytes, Stack size 664 bytes, arithmetic.o(i.deal_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smoothfunc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaks_valleys_final_match
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaks_valleys_Merge
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaksValleys_mergeArray_arrange
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derivativeFunc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindValleys
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPeaks
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIRProcess
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
</UL>

<P><STRONG><a name="[1b9]"></a>decompressbmp16</STRONG> (Thumb, 480 bytes, Stack size 128 bytes, gt24l16m1y20.o(i.decompressbmp16))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unziphfmex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[1bc]"></a>dev_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, etmainloop.o(i.dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = dev_init &rArr; gSensor_init &rArr; init_data_manger &rArr; flash_gsensor_data_partition_refresh &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer1Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_dev_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf_COS_log
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer2Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>dfu_app_dm_appl_instance_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfu_app_handler.o(i.dfu_app_dm_appl_instance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfu_app_dm_appl_instance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_instance_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[37]"></a>dfu_app_on_dfu_evt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfu_app_handler.o(i.dfu_app_on_dfu_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dfu_app_on_dfu_evt &rArr; bootloader_start &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[23e]"></a>dfu_app_reset_prepare_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare_set))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[e4]"></a>disable_pwm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, etmotor.o(i.disable_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVibrate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
</UL>

<P><STRONG><a name="[103]"></a>display_IncomingCall</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, etlcddisplayapp.o(i.display_IncomingCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[88]"></a>display_LOGO_message</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, etlcddisplayapp.o(i.display_LOGO_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = display_LOGO_message &rArr; et_i2c_write &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_battery_icon
</UL>

<P><STRONG><a name="[7d]"></a>display_Rssi_distance</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, etlcddisplayapp.o(i.display_Rssi_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = display_Rssi_distance &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RSSI_display
</UL>

<P><STRONG><a name="[1a7]"></a>display_alarm</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, etlcddisplayapp.o(i.display_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = display_alarm &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
</UL>

<P><STRONG><a name="[87]"></a>display_check_to_clear_Screen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.display_check_to_clear_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = display_check_to_clear_Screen &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
</UL>

<P><STRONG><a name="[10e]"></a>display_clr_COSdata</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, etlcddisplayapp.o(i.display_clr_COSdata))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_BT_Disconnected
</UL>

<P><STRONG><a name="[8e]"></a>display_down_page</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.display_down_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = display_down_page &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
</UL>

<P><STRONG><a name="[98]"></a>display_gb18030_string</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, etlcddisplayapp.o(i.display_gb18030_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changePage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
</UL>

<P><STRONG><a name="[1da]"></a>display_graphic_16x16</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, etlcddisplayapp.o(i.display_graphic_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = display_graphic_16x16 &rArr; et_i2c_write &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
</UL>

<P><STRONG><a name="[1db]"></a>display_graphic_8x16</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, etlcddisplayapp.o(i.display_graphic_8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = display_graphic_8x16 &rArr; et_i2c_write &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
</UL>

<P><STRONG><a name="[1d7]"></a>display_page</STRONG> (Thumb, 116 bytes, Stack size 216 bytes, etmultipagedisplay.o(i.display_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_lastDisplayTag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_complete_handle
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_up_page
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_down_page
</UL>

<P><STRONG><a name="[8d]"></a>display_up_page</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.display_up_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = display_up_page &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
</UL>

<P><STRONG><a name="[14c]"></a>dm_application_context_delete</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_context_load
</UL>

<P><STRONG><a name="[14b]"></a>dm_application_context_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dm_application_context_get &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_context_load
</UL>

<P><STRONG><a name="[1d5]"></a>dm_application_context_set</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_application_context_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dm_application_context_set &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
</UL>

<P><STRONG><a name="[1d0]"></a>dm_application_instance_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_application_instance_set))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
</UL>

<P><STRONG><a name="[185]"></a>dm_ble_evt_handler</STRONG> (Thumb, 962 bytes, Stack size 96 bytes, device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dm_ble_evt_handler &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_find
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[1d3]"></a>dm_distributed_keys_get</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, device_manager_peripheral.o(i.dm_distributed_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dm_distributed_keys_get &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
</UL>

<P><STRONG><a name="[1d2]"></a>dm_handle_get</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, device_manager_peripheral.o(i.dm_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dm_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
</UL>

<P><STRONG><a name="[1de]"></a>dm_handle_initialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_handle_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[1cd]"></a>dm_init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[1d4]"></a>dm_peer_addr_get</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.dm_peer_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm_peer_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
</UL>

<P><STRONG><a name="[1ce]"></a>dm_register</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_register
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[e1]"></a>etCheck_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uartprotocol.o(i.etCheck_reset))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[e2]"></a>etCheck_to_PoweroffCOS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, etsimple_uart.o(i.etCheck_to_PoweroffCOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = etCheck_to_PoweroffCOS &rArr; uart_init_lowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_COS_status
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[1e5]"></a>etSpim1CheckNorFlashBusy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, etspi.o(i.etSpim1CheckNorFlashBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSent_1Byte
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_low
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_high
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashWriteEnable
</UL>

<P><STRONG><a name="[1ea]"></a>etSpim1CheckNorFlashWriteEnable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, etspi.o(i.etSpim1CheckNorFlashWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSent_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
</UL>

<P><STRONG><a name="[1eb]"></a>etSpim1NorFlashInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etspi.o(i.etSpim1NorFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etSpim1NorFlashInit &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>etSpim1NorFlashPageProgrameStdMode</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, etspi.o(i.etSpim1NorFlashPageProgrameStdMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashWriteEnable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSentByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_low
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_high
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[106]"></a>etSpim1NorFlashSectorErase</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, etspi.o(i.etSpim1NorFlashSectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashWriteEnable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSentByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_low
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_high
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
</UL>

<P><STRONG><a name="[77]"></a>etSpim1ReadNorFlashStdMode</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, etspi.o(i.etSpim1ReadNorFlashStdMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSentByte
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_low
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Spi_MISO_high
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_set_address
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_KeyVersion
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SetAlarm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cos_ver_ans_handle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_ans_handle
</UL>

<P><STRONG><a name="[f3]"></a>etWrite_KEYID_to_flash</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, etspi.o(i.etWrite_KEYID_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = etWrite_KEYID_to_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1CheckNorFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SetAlarm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cos_ver_ans_handle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_ans_handle
</UL>

<P><STRONG><a name="[df]"></a>et_WDT_feed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, et_wdt.o(i.et_WDT_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = et_WDT_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_data_to_AG
</UL>

<P><STRONG><a name="[1bd]"></a>et_WDT_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, et_wdt.o(i.et_WDT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = et_WDT_init &rArr; nrf_drv_wdt_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_enable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[1c4]"></a>et_i2c_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eti2c.o(i.et_i2c_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[1a1]"></a>et_i2c_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, eti2c.o(i.et_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = et_i2c_write &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSentByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_8x16
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_graphic_16x16
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
</UL>

<P><STRONG><a name="[c5]"></a>et_i2c_write_conValue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, eti2c.o(i.et_i2c_write_conValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSentByte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_AllScreen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
</UL>

<P><STRONG><a name="[1fa]"></a>flush_mem_poll2flash</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, data_manger.o(i.flush_mem_poll2flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flush_mem_poll2flash &rArr; ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_block
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_manger_set_previous_head
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_gsensor_data_write_block_2_flash
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_block_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
</UL>

<P><STRONG><a name="[1ae]"></a>free_display_buff</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.free_display_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free_display_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_display_data_to_buff
</UL>

<P><STRONG><a name="[15c]"></a>gSensor_Clear_Fifo_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsensor.o(i.gSensor_Clear_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gSensor_Clear_Fifo_Data &rArr; LIS3DH_FIFOModeEnable &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_step_arithmetic_cal
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Read_Fifo_Data
</UL>

<P><STRONG><a name="[15d]"></a>gSensor_FWM_Interrupt_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsensor_driver.o(i.gSensor_FWM_Interrupt_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gSensor_FWM_Interrupt_Enable &rArr; LIS3DH_SetInt1Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_step_arithmetic_cal
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[14d]"></a>gSensor_Slope_Intr_Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gsensor_driver.o(i.gSensor_Slope_Intr_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gSensor_Slope_Intr_Enable &rArr; LIS3DH_SetInt1Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_timer_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[1fd]"></a>gSensor_Slope_Intr_config</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gsensor_driver.o(i.gSensor_Slope_Intr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gSensor_Slope_Intr_config &rArr; LIS3DH_SetIntConfiguration &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[1ff]"></a>gSensor_fifo_Interrupt_Enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gsensor_driver.o(i.gSensor_fifo_Interrupt_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gSensor_fifo_Interrupt_Enable &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[1c3]"></a>gSensor_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsensor.o(i.gSensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = gSensor_init &rArr; init_data_manger &rArr; flash_gsensor_data_partition_refresh &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[155]"></a>gSensor_set_duration_and_threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsensor_driver.o(i.gSensor_set_duration_and_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gSensor_set_duration_and_threshold &rArr; LIS3DH_SetInt1Threshold &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Threshold
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_gsensor_cfg_judge
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[16f]"></a>get_auto_send_data_to_app_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_transfer.o(i.get_auto_send_data_to_app_status))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
</UL>

<P><STRONG><a name="[16d]"></a>get_ble_connect_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, data_transfer.o(i.get_ble_connect_status))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_histy_sport_record_to_app_timer
</UL>

<P><STRONG><a name="[204]"></a>get_bt_name_req</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uartprotocol.o(i.get_bt_name_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_bt_name_req &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_resend_tag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>

<P><STRONG><a name="[207]"></a>get_cos_ver_req</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uartprotocol.o(i.get_cos_ver_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_cos_ver_req &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_resend_tag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>

<P><STRONG><a name="[1f4]"></a>get_dataPartition</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, data_manger.o(i.get_dataPartition))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_gsensor_data_write_block_2_flash
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
</UL>

<P><STRONG><a name="[117]"></a>get_ram_block</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, data_manger.o(i.get_ram_block))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mem_poll2flash
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_gsensor_data_write_block_2_flash
</UL>

<P><STRONG><a name="[ac]"></a>get_usr_using_timer_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usr_task.o(i.get_usr_using_timer_count))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer2Init
</UL>

<P><STRONG><a name="[133]"></a>get_work_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uartprotocol.o(i.get_work_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_work_state &rArr; USB_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
</UL>

<P><STRONG><a name="[1d9]"></a>hzbmp16</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, gt24l16m1y20.o(i.hzbmp16))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdram_map
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB18030_16_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
</UL>

<P><STRONG><a name="[200]"></a>init_data_manger</STRONG> (Thumb, 96 bytes, Stack size 272 bytes, data_manger.o(i.init_data_manger))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = init_data_manger &rArr; flash_gsensor_data_partition_refresh &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_infos_from_flash_first_page
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ram_pools
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_data_partition_refresh
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_init
</UL>

<P><STRONG><a name="[115]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intern_softdevice_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[215]"></a>ke_schedule</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ke_timer.o(i.ke_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ke_schedule &rArr; MotorVibrate &rArr; MotorCtr &rArr; display_check_to_clear_Screen &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[be]"></a>ke_timer_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ke_timer.o(i.ke_timer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SleepArithmetic
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sport_get_app_ack
</UL>

<P><STRONG><a name="[249]"></a>ke_timer_flag_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_timer.o(i.ke_timer_flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_tick
</UL>

<P><STRONG><a name="[c1]"></a>ke_timer_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ke_timer.o(i.ke_timer_set))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SleepArithmetic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_clock_time_unit_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_record_timer_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gSensor_nomotion_timer_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_driver_init
</UL>

<P><STRONG><a name="[20d]"></a>lcd_changeline_handle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.lcd_changeline_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_changeline_handle &rArr; copy_display_data_to_buff &rArr; free_display_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_display_data_to_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[20e]"></a>lcd_clear_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.lcd_clear_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_clear_handle &rArr; MotorCtr &rArr; display_check_to_clear_Screen &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_display_buff
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_lastDisplayTag
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[20b]"></a>lcd_display_complete_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, etmultipagedisplay.o(i.lcd_display_complete_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = lcd_display_complete_handle &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_display_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[20c]"></a>lcd_display_handle</STRONG> (Thumb, 162 bytes, Stack size 192 bytes, etmultipagedisplay.o(i.lcd_display_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lcd_display_handle &rArr; utf8_to_gbk &rArr; get_gbk_code &rArr; U2G &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_gbk
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_display_data_to_buff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[86]"></a>lcd_power_control</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, etlcddisplayapp.o(i.lcd_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_power_control &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_page
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_alarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Rssi_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
</UL>

<P><STRONG><a name="[212]"></a>lcdram_map</STRONG> (Thumb, 130 bytes, Stack size 44 bytes, gt24l16m1y20.o(i.lcdram_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lcdram_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = main &rArr; main_loop &rArr; sensor_INT_enable_check &rArr; app_event_g_sensor_intr1_handler &rArr; gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetToGetKEYID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_set_address
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[21b]"></a>main_loop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, etmainloop.o(i.main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = main_loop &rArr; sensor_INT_enable_check &rArr; app_event_g_sensor_intr1_handler &rArr; gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_switch_val
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_INT_enable_check
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_data_can_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_data_can_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_schedule
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_Live_to_app
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_histy_sport_record_to_app_timer
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[221]"></a>newService_Protocol_data_manage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, btprotocol.o(i.newService_Protocol_data_manage))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = newService_Protocol_data_manage &rArr; newService_protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_BT_connected
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_serve_nus_data_handler
</UL>

<P><STRONG><a name="[21e]"></a>newService_protocol_data_can_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, btprotocol.o(i.newService_protocol_data_can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = newService_protocol_data_can_send &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[223]"></a>new_server_nus_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ble_nus.o(i.new_server_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = new_server_nus_init &rArr; new_service_rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_tx_char_add
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[19d]"></a>new_service_ble_nus_string_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_nus.o(i.new_service_ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = new_service_ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_to_AG
</UL>

<P><STRONG><a name="[188]"></a>new_service_nus_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ble_nus.o(i.new_service_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = new_service_nus_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[c4]"></a>nrf_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_read_once
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_data_to_AG
</UL>

<P><STRONG><a name="[22c]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
</UL>

<P><STRONG><a name="[144]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[148]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[147]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[146]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[22d]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_pwm
</UL>

<P><STRONG><a name="[e6]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVibrate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
</UL>

<P><STRONG><a name="[aa]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer1Init
</UL>

<P><STRONG><a name="[a8]"></a>nrf_drv_timer_init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer1Init
</UL>

<P><STRONG><a name="[a9]"></a>nrf_drv_timer_us_to_ticks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_us_to_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETTimer1Init
</UL>

<P><STRONG><a name="[1f0]"></a>nrf_drv_wdt_channel_alloc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, et_nrf_drv_wdt.o(i.nrf_drv_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_wdt_channel_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_init
</UL>

<P><STRONG><a name="[1ee]"></a>nrf_drv_wdt_channel_feed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, et_nrf_drv_wdt.o(i.nrf_drv_wdt_channel_feed))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_feed
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_drv_wdt_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, et_nrf_drv_wdt.o(i.nrf_drv_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_init
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_drv_wdt_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, et_nrf_drv_wdt.o(i.nrf_drv_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_wdt_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_init
</UL>

<P><STRONG><a name="[21d]"></a>protocol_data_can_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, btprotocol.o(i.protocol_data_can_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = protocol_data_can_send &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[178]"></a>pstorage_access_status_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[192]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
</UL>

<P><STRONG><a name="[1c9]"></a>pstorage_clear</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[1cc]"></a>pstorage_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pstorage_init &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[193]"></a>pstorage_load</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>

<P><STRONG><a name="[1e1]"></a>pstorage_register</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pstorage_register &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[2e]"></a>pstorage_store</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
<LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[233]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[2d]"></a>pstorage_update</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
<LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[73]"></a>r_dat_bat</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, et_font_spi.o(i.r_dat_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiSentByte
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_GetData
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unziphfmex
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
</UL>

<P><STRONG><a name="[119]"></a>read_flash</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, data_manger.o(i.read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_flash &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_histy_sport_record_to_app_timer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_infos_from_flash_first_page
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_data_partition_refresh
</UL>

<P><STRONG><a name="[214]"></a>read_infos_from_flash_first_page</STRONG> (Thumb, 56 bytes, Stack size 280 bytes, data_manger.o(i.read_infos_from_flash_first_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = read_infos_from_flash_first_page &rArr; read_flash &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
</UL>

<P><STRONG><a name="[220]"></a>read_switch_val</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, etkeyboard.o(i.read_switch_val))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[107]"></a>receive_app_usr_info</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, data_transfer.o(i.receive_app_usr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = receive_app_usr_info &rArr; receive_userInfo_from_app &rArr; write_infos_2_flash_first_page &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_userInfo_from_app
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[234]"></a>receive_userInfo_from_app</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, arithmetic_data_manger.o(i.receive_userInfo_from_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = receive_userInfo_from_app &rArr; write_infos_2_flash_first_page &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_infos_2_flash_first_page
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_info
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arth_init_person_info
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_app_usr_info
</UL>

<P><STRONG><a name="[1e3]"></a>save_COS_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uartprotocol.o(i.save_COS_status))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etCheck_to_PoweroffCOS
</UL>

<P><STRONG><a name="[57]"></a>send_data_timeout_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, data_transfer.o(i.send_data_timeout_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = send_data_timeout_timer &rArr; auto_send_sport_record_to_app_timer &rArr; Protocol_send_sport_data_to_ag &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_send_sport_record_to_app_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>send_key_to_cos</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, uartprotocol.o(i.send_key_to_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_key_to_cos &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packed_data_frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
</UL>

<P><STRONG><a name="[237]"></a>send_key_val_to_cos</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, uartprotocol.o(i.send_key_val_to_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_key_val_to_cos &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart_resend_tag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packed_data_frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
</UL>

<P><STRONG><a name="[109]"></a>send_sport_get_app_ack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_transfer.o(i.send_sport_get_app_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_sport_get_app_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle_statusPacket
</UL>

<P><STRONG><a name="[1c2]"></a>sensor_GPIO_i2c_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eti2c.o(i.sensor_GPIO_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensor_GPIO_i2c_init &rArr; sensor_IicStop
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[217]"></a>sensor_GPIO_i2c_read</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, eti2c.o(i.sensor_GPIO_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_SendAcknowledge
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_long
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_Veryshort
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_i2c_read
</UL>

<P><STRONG><a name="[db]"></a>sensor_GPIO_i2c_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, eti2c.o(i.sensor_GPIO_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>

<P><STRONG><a name="[21f]"></a>sensor_INT_enable_check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gsensor_driver.o(i.sensor_INT_enable_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = sensor_INT_enable_check &rArr; app_event_g_sensor_intr1_handler &rArr; gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[210]"></a>sensor_INT_set_api</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsensor_driver.o(i.sensor_INT_set_api))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[135]"></a>set_uart_resend_tag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartprotocol.o(i.set_uart_resend_tag))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_val_to_cos
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cos_ver_req
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_req
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
</UL>

<P><STRONG><a name="[23f]"></a>simple_uart_config</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, etsimple_uart.o(i.simple_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = simple_uart_config
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
</UL>

<P><STRONG><a name="[e0]"></a>simple_uart_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, etsimple_uart.o(i.simple_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = simple_uart_init &rArr; simple_uart_config
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z8_Power_ctr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_COS_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_clear_buff
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Cos_Ready
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[243]"></a>simple_uart_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, etsimple_uart.o(i.simple_uart_put))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstringbuff
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_putstring
</UL>

<P><STRONG><a name="[81]"></a>simple_uart_putstring</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, etsimple_uart.o(i.simple_uart_putstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = simple_uart_putstring
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_put
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_open_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
</UL>

<P><STRONG><a name="[83]"></a>simple_uart_putstringbuff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, etsimple_uart.o(i.simple_uart_putstringbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_put
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_open_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf_COS_log
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>

<P><STRONG><a name="[15e]"></a>sleep_once_interval_max_steps</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sleep_record.o(i.sleep_once_interval_max_steps))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
</UL>

<P><STRONG><a name="[14f]"></a>sleep_slope_check</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sleep_record.o(i.sleep_slope_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_slope_check
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
</UL>

<P><STRONG><a name="[39]"></a>softdevice_assertion_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_assertion_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_assertion_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[18f]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[18e]"></a>softdevice_handler_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[190]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[168]"></a>sqrt_16</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, common_arithmetic.o(i.sqrt_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sqrt_16
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_gsensor_write_data
</UL>

<P><STRONG><a name="[7e]"></a>start_Rssi</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.start_Rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = start_Rssi &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RSSI_display
</UL>

<P><STRONG><a name="[ff]"></a>system_day_sec_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sys_time.o(i.system_day_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = system_day_sec_init &rArr; system_time_get &rArr; get_yeardays &rArr; isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
</UL>

<P><STRONG><a name="[100]"></a>system_sec_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_time.o(i.system_sec_get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_store_steps
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_step_arithmetic_cal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gSensor_nomotion_timer_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_begin_info
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_slope_check
</UL>

<P><STRONG><a name="[a3]"></a>system_time_get</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, sys_time.o(i.system_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = system_time_get &rArr; get_yeardays &rArr; isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isleap
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yeardays
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_day_sec_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_gsensor_cfg_judge
</UL>

<P><STRONG><a name="[de]"></a>system_time_get_second_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_time.o(i.system_time_get_second_clr))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[dd]"></a>system_time_get_second_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_time.o(i.system_time_get_second_ready))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manage_other_Event
</UL>

<P><STRONG><a name="[1c0]"></a>system_time_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sys_time.o(i.system_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = system_time_init &rArr; system_time_set &rArr; system_day_sec_init &rArr; system_time_get &rArr; get_yeardays &rArr; isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_init
</UL>

<P><STRONG><a name="[248]"></a>system_time_set</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, sys_time.o(i.system_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = system_time_set &rArr; system_day_sec_init &rArr; system_time_get &rArr; get_yeardays &rArr; isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_day_sec_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isleap
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_init
</UL>

<P><STRONG><a name="[3a]"></a>system_time_tick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys_time.o(i.system_time_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_time_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_time.o(i.system_time_init)
</UL>
<P><STRONG><a name="[fe]"></a>system_time_updated</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_time.o(i.system_time_updated))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[23]"></a>timer_pwm_event_handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, etmotor.o(i.timer_pwm_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> etmotor.o(i.ETTimer1Init)
</UL>
<P><STRONG><a name="[21c]"></a>uart_data_handle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uartprotocol.o(i.uart_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = uart_data_handle &rArr; ParseRecvUartData &rArr; go_to_command &rArr; lcd_display_complete_handle &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_open_check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_state
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_req
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[1e4]"></a>uart_init_lowPower</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, etsimple_uart.o(i.uart_init_lowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init_lowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z8_Power_ctr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_COS_status
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_clear_buff
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Cos_Ready
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etCheck_to_PoweroffCOS
</UL>

<P><STRONG><a name="[1ba]"></a>unziphfmex</STRONG> (Thumb, 318 bytes, Stack size 80 bytes, gt24l16m1y20.o(i.unziphfmex))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dat_bat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompressbmp16
</UL>

<P><STRONG><a name="[58]"></a>usr_clock_time_unit_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, etalarm.o(i.usr_clock_time_unit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = usr_clock_time_unit_handler &rArr; clock_alarm_check &rArr; SaveEveryDayHistySport_Data_info2_datamanger &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_alarm_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>usr_timer_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gsensor.o(i.usr_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usr_timer_handler &rArr; gSensor_Slope_Intr_Enable &rArr; LIS3DH_SetInt1Pin &rArr; LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_task.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>utf8_to_gbk</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, etutf8tounicode.o(i.utf8_to_gbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = utf8_to_gbk &rArr; get_gbk_code &rArr; U2G &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gbk_code
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
</UL>

<P><STRONG><a name="[31]"></a>wdt_event_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, et_wdt.o(i.wdt_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> et_wdt.o(i.et_WDT_init)
</UL>
<P><STRONG><a name="[15b]"></a>write_data_item_2_mem_pool</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, data_manger.o(i.write_data_item_2_mem_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = write_data_item_2_mem_pool &rArr; flush_mem_poll2flash &rArr; ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_block
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mem_poll2flash
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sport_info2_datamanger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_end_info
</UL>

<P><STRONG><a name="[236]"></a>write_infos_2_flash_first_page</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, data_manger.o(i.write_infos_2_flash_first_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_infos_2_flash_first_page &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_userInfo_from_app
</UL>

<P><STRONG><a name="[19a]"></a>write_switch_val</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, etkeyboard.o(i.write_switch_val))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[242]"></a>z8_Power_ctr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartprotocol.o(i.z8_Power_ctr))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>BT_set_address</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, main.o(i.BT_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BT_set_address &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>advertising_init</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>app_context_load</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, main.o(i.app_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_context_load &rArr; dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[29]"></a>ble_evt_dispatch</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_evt_dispatch &rArr; on_ble_evt &rArr; Get_Rssi_stop &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_service_nus_on_ble_evt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[18d]"></a>ble_stack_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>conn_params_error_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_params_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2f]"></a>device_manager_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = device_manager_evt_handler &rArr; app_context_load &rArr; dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.device_manager_init)
</UL>
<P><STRONG><a name="[1cb]"></a>device_manager_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(i.device_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = device_manager_init &rArr; dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>gap_params_init</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gap_params_init &rArr; etSpim1ReadNorFlashStdMode &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetToGetKEYID
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>new_serve_nus_data_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.new_serve_nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = new_serve_nus_data_handler &rArr; newService_Protocol_data_manage &rArr; newService_protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_Protocol_data_manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[35]"></a>nus_data_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = nus_data_handler &rArr; Protocol_data_manage &rArr; protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_manage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[25]"></a>on_adv_evt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = on_adv_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[189]"></a>on_ble_evt</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, main.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_ble_evt &rArr; Get_Rssi_stop &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lastDisplayTag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_TX_complete
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_BT_connected
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_set_BT_Disconnected
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Rssi_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[33]"></a>on_conn_params_evt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_conn_params_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[38]"></a>reset_prepare</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.reset_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reset_prepare &rArr; ble_conn_params_stop &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[21a]"></a>services_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = services_init &rArr; ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_server_nus_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_reset_prepare_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>sys_evt_dispatch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[3b]"></a>bsp_button_event_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>button_timer_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[11e]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[127]"></a>adv_data_encode</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[12b]"></a>conn_int_encode</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[12c]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[128]"></a>name_encode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[12d]"></a>service_data_encode</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[129]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[12a]"></a>uuid_list_encode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[24a]"></a>uuid_list_sized_encode</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[173]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_address_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[179]"></a>peer_address_exists</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[17a]"></a>whitelist_has_entries</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[17d]"></a>conn_params_negotiation</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[1ab]"></a>is_conn_params_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[28]"></a>update_timeout_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[225]"></a>new_service_rx_char_add</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, ble_nus.o(i.new_service_rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = new_service_rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_server_nus_init
</UL>

<P><STRONG><a name="[224]"></a>new_service_tx_char_add</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, ble_nus.o(i.new_service_tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = new_service_tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_server_nus_init
</UL>

<P><STRONG><a name="[18c]"></a>rx_char_add</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[18b]"></a>tx_char_add</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[181]"></a>dfu_ctrl_pt_add</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, ble_dfu.o(i.dfu_ctrl_pt_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfu_ctrl_pt_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
</UL>

<P><STRONG><a name="[180]"></a>dfu_pkt_char_add</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, ble_dfu.o(i.dfu_pkt_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfu_pkt_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
</UL>

<P><STRONG><a name="[182]"></a>dfu_rev_char_add</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, ble_dfu.o(i.dfu_rev_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfu_rev_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
</UL>

<P><STRONG><a name="[184]"></a>on_ctrl_pt_write</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, ble_dfu.o(i.on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_ctrl_pt_write &rArr; ble_dfu_response_send
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
</UL>

<P><STRONG><a name="[1e0]"></a>app_evt_notify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.app_evt_notify))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[1df]"></a>connection_instance_find</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.connection_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connection_instance_find
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1ac]"></a>connection_instance_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.connection_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connection_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c5]"></a>device_context_store</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = device_context_store &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c6]"></a>device_instance_allocate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.device_instance_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = device_instance_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c7]"></a>device_instance_find</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = device_instance_find &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1c8]"></a>device_instance_free</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.device_instance_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[30]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 370 bytes, Stack size 104 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dm_pstorage_cb_handler &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[46]"></a>gattc_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>gattc_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>gattc_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>gatts_context_apply</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatts_context_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>gatts_context_load</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gatts_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>gatts_context_store</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>gattsc_context_apply</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>gattsc_context_load</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattsc_context_load &rArr; gatts_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>gattsc_context_store</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>no_service_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>no_service_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>no_service_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>peer_instance_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[2c]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[1e2]"></a>update_status_bit_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.update_status_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[22b]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[22a]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[af]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[227]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[228]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[153]"></a>app_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[152]"></a>app_notify_error_state_transit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[1a2]"></a>clear_operation_execute</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[1a4]"></a>clear_post_processing_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[1a8]"></a>cmd_process</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>

<P><STRONG><a name="[1aa]"></a>cmd_queue_element_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[1a9]"></a>cmd_queue_enqueue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[1a5]"></a>command_end_procedure_run</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[4f]"></a>data_page_erase_state_run</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = data_page_erase_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_to_swap_write_state_run &rArr; swap_sub_state_err_busy_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>flash_api_err_code_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[1f5]"></a>flash_operation_success_run</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_operation_success_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[1f8]"></a>flash_page_erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[1f9]"></a>flash_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[51]"></a>head_restore_state_run</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = head_restore_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>is_page_erase_required</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_page_erase_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[231]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[1f7]"></a>main_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[232]"></a>pstorage_flash_page_end</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
</UL>

<P><STRONG><a name="[1a3]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
</UL>

<P><STRONG><a name="[154]"></a>sm_state_change</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[246]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = state_data_erase_swap_entry_run &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[4a]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>state_restore_head_entry_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[4d]"></a>swap_erase_state_run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_erase_state_run &rArr; swap_sub_state_err_busy_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_err_busy_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[1b0]"></a>swap_sub_state_state_change</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[50]"></a>tail_restore_state_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tail_restore_state_run &rArr; clear_post_processing_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>nrf_drv_timer_interrupt_handle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_interrupt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_interrupt_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[27]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[26]"></a>gpiote_event_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_INT_set_api
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[161]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[114]"></a>compare_reg_update</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>expired_timers_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>list_deletions_handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>list_insertions_handler</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>rtc1_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[165]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[219]"></a>timer_list_insert</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[218]"></a>timer_list_remove</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[10f]"></a>timer_timeouts_check</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>user_id_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[164]"></a>user_op_alloc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[194]"></a>bootloader_start</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, dfu_app_handler.o(i.bootloader_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = bootloader_start &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_feed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_peer_data_set
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[195]"></a>dfu_app_peer_data_set</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, dfu_app_handler.o(i.dfu_app_peer_data_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dfu_app_peer_data_set &rArr; dm_application_context_set &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_get
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_start
</UL>

<P><STRONG><a name="[0]"></a>dfu_app_reset_prepare</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare))
<BR>[Address Reference Count : 1]<UL><LI> dfu_app_handler.o(.data)
</UL>
<P><STRONG><a name="[23d]"></a>G_nrf_gpio_cfg_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eti2c.o(i.G_nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_SendAcknowledge
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
</UL>

<P><STRONG><a name="[ba]"></a>IIcDelay_Veryshort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eti2c.o(i.IIcDelay_Veryshort))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSentByte
</UL>

<P><STRONG><a name="[23b]"></a>IIcDelay_long</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eti2c.o(i.IIcDelay_long))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_SendAcknowledge
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStart
</UL>

<P><STRONG><a name="[b9]"></a>IIcDelay_middle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eti2c.o(i.IIcDelay_middle))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_SendAcknowledge
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicStart
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSentByte
</UL>

<P><STRONG><a name="[b8]"></a>IIcDelay_short</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eti2c.o(i.IIcDelay_short))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_IicSentByte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IicSentByte
</UL>

<P><STRONG><a name="[b7]"></a>IicSentByte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eti2c.o(i.IicSentByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_short
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_Veryshort
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>

<P><STRONG><a name="[bb]"></a>IicStart</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eti2c.o(i.IicStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IicStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>

<P><STRONG><a name="[bc]"></a>IicStop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eti2c.o(i.IicStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IicStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
</UL>

<P><STRONG><a name="[23a]"></a>sensor_IicSentByte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, eti2c.o(i.sensor_IicSentByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_short
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_Veryshort
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
</UL>

<P><STRONG><a name="[239]"></a>sensor_IicStart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eti2c.o(i.sensor_IicStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_IicStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_long
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
</UL>

<P><STRONG><a name="[238]"></a>sensor_IicStop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, eti2c.o(i.sensor_IicStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_IicStop
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_init
</UL>

<P><STRONG><a name="[23c]"></a>sensor_SendAcknowledge</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eti2c.o(i.sensor_SendAcknowledge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_SendAcknowledge
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_middle
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIcDelay_long
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
</UL>

<P><STRONG><a name="[e5]"></a>Motor_data_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, etmotor.o(i.Motor_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVibrate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
</UL>

<P><STRONG><a name="[209]"></a>get_yeardays</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys_time.o(i.get_yeardays))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_yeardays &rArr; isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
</UL>

<P><STRONG><a name="[20a]"></a>isleap</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys_time.o(i.isleap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = isleap &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yeardays
</UL>

<P><STRONG><a name="[240]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, etsimple_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_lowPower
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_config
</UL>

<P><STRONG><a name="[90]"></a>Display_Battery</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, etlcddisplayapp.o(i.Display_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Display_Battery &rArr; lcd_power_control &rArr; clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryPercent
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_full_detect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_battery_icon
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
</UL>

<P><STRONG><a name="[95]"></a>Display_CheckMenuMode</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, etlcddisplayapp.o(i.Display_CheckMenuMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display_CheckMenuMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[96]"></a>Display_Key_Version</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, etlcddisplayapp.o(i.Display_Key_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Display_Key_Version &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HWVersion
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_COSVersion
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[8f]"></a>Display_Menu</STRONG> (Thumb, 768 bytes, Stack size 64 bytes, etlcddisplayapp.o(i.Display_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Display_Menu &rArr; display_step_distance_engery &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_Rssi
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Rssi_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Key_Version
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_CheckMenuMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_CMD_FIND_AG
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_step_distance_engery
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_day_clock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_secterScreen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_disp_start_colume
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyState
</UL>

<P><STRONG><a name="[94]"></a>Display_battery_icon</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.Display_battery_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Display_battery_icon &rArr; display_LOGO_message &rArr; et_i2c_write &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
</UL>

<P><STRONG><a name="[a2]"></a>Get_disp_start_colume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, etlcddisplayapp.o(i.Get_disp_start_colume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Get_disp_start_colume &rArr; display_GetStringLen
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_GetStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[1d8]"></a>changePage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, etlcddisplayapp.o(i.changePage))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
</UL>

<P><STRONG><a name="[85]"></a>check_StrCanDisplay</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, etlcddisplayapp.o(i.check_StrCanDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_StrCanDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lastDisplayTag
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
</UL>

<P><STRONG><a name="[9d]"></a>clear_secterScreen</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, etlcddisplayapp.o(i.clear_secterScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clear_secterScreen &rArr; et_i2c_write_conValue &rArr; IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write_conValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_i2c_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_to_clear_Screen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
</UL>

<P><STRONG><a name="[b6]"></a>display_GetStringLen</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, etlcddisplayapp.o(i.display_GetStringLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = display_GetStringLen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_disp_start_colume
</UL>

<P><STRONG><a name="[a4]"></a>display_day_clock</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, etlcddisplayapp.o(i.display_day_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = display_day_clock &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_LCDDispCanChange
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[a1]"></a>display_step_distance_engery</STRONG> (Thumb, 768 bytes, Stack size 88 bytes, etlcddisplayapp.o(i.display_step_distance_engery))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = display_step_distance_engery &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hzbmp16
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arthmetic_get_total_steps
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arthmetic_get_total_distance
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arthmetic_get_total_calorie
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_gb18030_string
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_LOGO_message
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPageColume
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Menu
</UL>

<P><STRONG><a name="[dc]"></a>Manage_other_Event</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, etmainloop.o(i.Manage_other_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = Manage_other_Event &rArr; Check_RSSI_display &rArr; display_Rssi_distance &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_feed
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etCheck_to_PoweroffCOS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get_second_ready
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get_second_clr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_detect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etCheck_reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_resend_tag
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_check_BT_connected
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_control
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_idle_logo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_delay_check
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RSSI_display
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[208]"></a>get_gbk_code</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, etutf8tounicode.o(i.get_gbk_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_gbk_code &rArr; U2G &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U2G
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_to_gbk
</UL>

<P><STRONG><a name="[136]"></a>app_arithmetic_cal_timer_handler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, app_arithmetic.o(i.app_arithmetic_cal_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_store_steps
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_arithmetic_buf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_pedometer_state
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_transfer_data
</UL>

<P><STRONG><a name="[13a]"></a>app_set_pedometer_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_arithmetic.o(i.app_set_pedometer_state))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
</UL>

<P><STRONG><a name="[167]"></a>arithmetic_gsensor_write_data</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, app_arithmetic.o(i.arithmetic_gsensor_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arithmetic_gsensor_write_data &rArr; sqrt_16
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_16
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoCharGetShort
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_write_data2buf
</UL>

<P><STRONG><a name="[169]"></a>arithmetic_transfer_data</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_arithmetic.o(i.arithmetic_transfer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_arithmetic_buf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_write_data2buf
</UL>

<P><STRONG><a name="[138]"></a>clear_arithmetic_buf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_arithmetic.o(i.clear_arithmetic_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_arithmetic_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stop_step_arithmetic_cal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_step_arithmetic_cal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_transfer_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_cal_timer_handler
</UL>

<P><STRONG><a name="[ad]"></a>FIRProcess</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, arithmetic.o(i.FIRProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FIRProcess &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b4]"></a>FindPeaks</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, arithmetic.o(i.FindPeaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FindPeaks
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b5]"></a>FindValleys</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, arithmetic.o(i.FindValleys))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FindValleys
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b2]"></a>derivativeFunc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arithmetic.o(i.derivativeFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = derivativeFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b7]"></a>peaksValleys_mergeArray_arrange</STRONG> (Thumb, 356 bytes, Stack size 240 bytes, arithmetic.o(i.peaksValleys_mergeArray_arrange))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = peaksValleys_mergeArray_arrange &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b6]"></a>peaks_valleys_Merge</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, arithmetic.o(i.peaks_valleys_Merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peaks_valleys_Merge
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b8]"></a>peaks_valleys_final_match</STRONG> (Thumb, 510 bytes, Stack size 472 bytes, arithmetic.o(i.peaks_valleys_final_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_matchArray_verfy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[1b3]"></a>smoothfunc</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, arithmetic.o(i.smoothfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = smoothfunc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_raw_data
</UL>

<P><STRONG><a name="[230]"></a>steps_matchArray_verfy</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, arithmetic.o(i.steps_matchArray_verfy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = steps_matchArray_verfy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peaks_valleys_final_match
</UL>

<P><STRONG><a name="[13c]"></a>app_arithmetic_save_sportinfo</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, arithmetic_data_manger.o(i.app_arithmetic_save_sportinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = app_arithmetic_save_sportinfo &rArr; steps_2_distance &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Add_Interval_Steps
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_distance
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steps_2_calorie
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sportInfo2DMDataItem
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sport_info2_datamanger
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_store_steps
</UL>

<P><STRONG><a name="[16b]"></a>arth_init_person_info</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, arithmetic_data_manger.o(i.arth_init_person_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arth_init_person_info &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_userInfo_from_app
</UL>

<P><STRONG><a name="[141]"></a>send_sport_info2_datamanger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arithmetic_data_manger.o(i.send_sport_info2_datamanger))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = send_sport_info2_datamanger &rArr; write_data_item_2_mem_pool &rArr; flush_mem_poll2flash &rArr; ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>

<P><STRONG><a name="[235]"></a>set_user_info</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arithmetic_data_manger.o(i.set_user_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_user_info
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_userInfo_from_app
</UL>

<P><STRONG><a name="[140]"></a>sportInfo2DMDataItem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, arithmetic_data_manger.o(i.sportInfo2DMDataItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sportInfo2DMDataItem &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortSetTwoChar
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSetThreeChar
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSetFourChar
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>

<P><STRONG><a name="[13e]"></a>steps_2_calorie</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, arithmetic_data_manger.o(i.steps_2_calorie))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = steps_2_calorie &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>

<P><STRONG><a name="[13d]"></a>steps_2_distance</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, arithmetic_data_manger.o(i.steps_2_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = steps_2_distance &rArr; DbgPrintf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrintf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_arithmetic_save_sportinfo
</UL>

<P><STRONG><a name="[1f3]"></a>flash_gsensor_data_partition_refresh</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, data_manger.o(i.flash_gsensor_data_partition_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = flash_gsensor_data_partition_refresh &rArr; flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
</UL>

<P><STRONG><a name="[11d]"></a>flash_gsensor_sport_sleep_data_partition_refresh</STRONG> (Thumb, 388 bytes, Stack size 320 bytes, data_manger.o(i.flash_gsensor_sport_sleep_data_partition_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = flash_gsensor_sport_sleep_data_partition_refresh &rArr; sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dataPartition
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_erase_flash
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_data_partition_refresh
</UL>

<P><STRONG><a name="[213]"></a>init_ram_pools</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, data_manger.o(i.init_ram_pools))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_ram_pools
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
</UL>

<P><STRONG><a name="[1fc]"></a>ram_block_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, data_manger.o(i.ram_block_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ram_block_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mem_poll2flash
</UL>

<P><STRONG><a name="[1fb]"></a>ram_gsensor_data_write_block_2_flash</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, data_manger.o(i.ram_gsensor_data_write_block_2_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ram_block
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dataPartition
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_mem_poll2flash
</UL>

<P><STRONG><a name="[118]"></a>sector_erase_flash</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, data_manger.o(i.sector_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sector_erase_flash &rArr; etSpim1NorFlashSectorErase &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_infos_2_flash_first_page
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_gsensor_sport_sleep_data_partition_refresh
</UL>

<P><STRONG><a name="[11b]"></a>write_flash</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, data_manger.o(i.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_infos_2_flash_first_page
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_data_manger
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEveryDayHistySport_Data_info2_datamanger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_gsensor_data_write_block_2_flash
</UL>

<P><STRONG><a name="[150]"></a>gSensor_Read_Fifo_Data</STRONG> (Thumb, 106 bytes, Stack size 216 bytes, gsensor.o(i.gSensor_Read_Fifo_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = gSensor_Read_Fifo_Data &rArr; arithmetic_write_data2buf &rArr; arithmetic_transfer_data &rArr; app_arithmetic_cal_timer_handler &rArr; app_stop_step_arithmetic_cal &rArr; deal_raw_data &rArr; peaks_valleys_final_match &rArr; steps_matchArray_verfy
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Clear_Fifo_Data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arithmetic_write_data2buf
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_Get_XYZ_Raw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetFifoSourceReg
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_event_g_sensor_intr1_handler
</UL>

<P><STRONG><a name="[1fe]"></a>gSensor_driver_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gsensor.o(i.gSensor_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gSensor_driver_init &rArr; Init_SleepArithmetic &rArr; app_sleep_gsensor_cfg_judge &rArr; gSensor_set_duration_and_threshold &rArr; LIS3DH_SetInt1Threshold &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_FWM_Interrupt_Enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SleepArithmetic
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_set_duration_and_threshold
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_fifo_Interrupt_Enable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_Slope_Intr_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetTriggerInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt2Pin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_HPFAOI1Enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_init
</UL>

<P><STRONG><a name="[c8]"></a>LIS3DH_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gsensor_driver.o(i.LIS3DH_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LIS3DH_ReadReg &rArr; lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntConfiguration
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetWHO_AM_I
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_fifo_Interrupt_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetTriggerInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt2Pin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_HPFAOI1Enable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetInt1Src
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetFifoSourceReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>

<P><STRONG><a name="[c9]"></a>LIS3DH_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gsensor_driver.o(i.LIS3DH_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntConfiguration
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Threshold
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Pin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt1Duration
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_fifo_Interrupt_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetWaterMark
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetTriggerInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetIntMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetInt2Pin
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_HPFAOI1Enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_FIFOModeEnable
</UL>

<P><STRONG><a name="[ce]"></a>lis3dh_i2c_read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gsensor_driver.o(i.lis3dh_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lis3dh_i2c_read &rArr; sensor_GPIO_i2c_read &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_GPIO_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_Get_XYZ_Raw
</UL>

<P><STRONG><a name="[c0]"></a>app_sleep_gsensor_cfg_judge</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sleep_record.o(i.app_sleep_gsensor_cfg_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_sleep_gsensor_cfg_judge &rArr; gSensor_set_duration_and_threshold &rArr; LIS3DH_SetInt1Threshold &rArr; LIS3DH_WriteReg &rArr; sensor_GPIO_i2c_write &rArr; sensor_IicSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arithmetic_Set_YAxis_Min_Threshold
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gSensor_set_duration_and_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SleepArithmetic
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_record_timer_handler
</UL>

<P><STRONG><a name="[bf]"></a>app_sleep_store_item_begin_info</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sleep_record.o(i.app_sleep_store_item_begin_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_sleep_store_item_begin_info
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortSetTwoChar
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntSetFourChar
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_pedometer_state
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SleepArithmetic
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_record_timer_handler
</UL>

<P><STRONG><a name="[156]"></a>app_sleep_store_item_end_info</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sleep_record.o(i.app_sleep_store_item_end_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = app_sleep_store_item_end_info &rArr; write_data_item_2_mem_pool &rArr; flush_mem_poll2flash &rArr; ram_gsensor_data_write_block_2_flash &rArr; write_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_item_2_mem_pool
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_xDataSect_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_record_timer_handler
</UL>

<P><STRONG><a name="[151]"></a>sleep_add_xyzData</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sleep_record.o(i.sleep_add_xyzData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sleep_add_xyzData &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourCharGetInt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoCharGetShort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gSensor_nomotion_timer_handler
</UL>

<P><STRONG><a name="[245]"></a>sleep_xDataSect_SameCal</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sleep_record.o(i.sleep_xDataSect_SameCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sleep_xDataSect_SameCal
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortSetTwoChar
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_xDataSect_analysis
</UL>

<P><STRONG><a name="[15a]"></a>sleep_xDataSect_analysis</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sleep_record.o(i.sleep_xDataSect_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleep_xDataSect_analysis &rArr; sleep_xDataSect_SameCal
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_xDataSect_SameCal
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sleep_store_item_end_info
</UL>

<P><STRONG><a name="[f9]"></a>Get_Datacheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, btprotocol.o(i.Get_Datacheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Datacheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>

<P><STRONG><a name="[f8]"></a>Protocol_Clr_TX_complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btprotocol.o(i.Protocol_Clr_TX_complete))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_send_data_to_AG
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>

<P><STRONG><a name="[f0]"></a>Protocol_GetAlarm</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, btprotocol.o(i.Protocol_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Protocol_GetAlarm &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[f1]"></a>Protocol_Packet_Status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_Packet_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protocol_Packet_Status &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_Protocol_data_manage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_manage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SetAlarm
</UL>

<P><STRONG><a name="[104]"></a>Protocol_SET_AUTOSEND_STEP_NUM</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_SET_AUTOSEND_STEP_NUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_SET_AUTOSEND_STEP_NUM
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[f2]"></a>Protocol_SetAlarm</STRONG> (Thumb, 182 bytes, Stack size 136 bytes, btprotocol.o(i.Protocol_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Protocol_SetAlarm &rArr; Protocol_Packet_Status &rArr; Protocol_data_to_AG &rArr; Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
</UL>

<P><STRONG><a name="[f5]"></a>Protocol_check_data</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, btprotocol.o(i.Protocol_check_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Protocol_check_data
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_Protocol_data_manage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_manage
</UL>

<P><STRONG><a name="[fc]"></a>Protocol_handle</STRONG> (Thumb, 792 bytes, Stack size 280 bytes, btprotocol.o(i.Protocol_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_KeyVersion
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_updated
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sec_get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_day_sec_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashSectorErase
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1NorFlashPageProgrameStdMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCtr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatteryPercent
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_IncomingCall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dislay_Test_LCD
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SetAlarm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_SET_AUTOSEND_STEP_NUM
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_GetAlarm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetWHO_AM_I
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_app_usr_info
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_app_usr_info
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Cos_Ready
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_COS_status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_data_can_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_data_can_send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
</UL>

<P><STRONG><a name="[108]"></a>Protocol_handle_statusPacket</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btprotocol.o(i.Protocol_handle_statusPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_handle_statusPacket &rArr; send_sport_get_app_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sport_get_app_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_Save_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_protocol_Save_data
</UL>

<P><STRONG><a name="[fa]"></a>Protocol_packed_data</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, btprotocol.o(i.Protocol_packed_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_packed_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>

<P><STRONG><a name="[fb]"></a>Protocol_send_data_to_AG</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, btprotocol.o(i.Protocol_send_data_to_AG))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Protocol_send_data_to_AG &rArr; bt_send_to_AG &rArr; new_service_ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_send_to_AG
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;et_WDT_feed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Clr_TX_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_to_AG
</UL>

<P><STRONG><a name="[222]"></a>newService_protocol_Save_data</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, btprotocol.o(i.newService_protocol_Save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = newService_protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle_statusPacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Datacheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newService_Protocol_data_manage
</UL>

<P><STRONG><a name="[f7]"></a>protocol_Save_data</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, btprotocol.o(i.protocol_Save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = protocol_Save_data &rArr; Protocol_handle &rArr; display_IncomingCall &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_uart_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle_statusPacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_handle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Packet_Status
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Datacheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_data_manage
</UL>

<P><STRONG><a name="[e8]"></a>ParseRecvUartData</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, uartprotocol.o(i.ParseRecvUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = ParseRecvUartData &rArr; go_to_command &rArr; lcd_display_complete_handle &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_clear_buff
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_handle
</UL>

<P><STRONG><a name="[ea]"></a>check_frame</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uartprotocol.o(i.check_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>

<P><STRONG><a name="[203]"></a>get_bt_name_ans_handle</STRONG> (Thumb, 106 bytes, Stack size 144 bytes, uartprotocol.o(i.get_bt_name_ans_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = get_bt_name_ans_handle &rArr; etWrite_KEYID_to_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[205]"></a>get_cos_data_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uartprotocol.o(i.get_cos_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_cos_data_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_data
</UL>

<P><STRONG><a name="[ed]"></a>go_to_command</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, uartprotocol.o(i.go_to_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = go_to_command &rArr; lcd_display_complete_handle &rArr; display_page &rArr; display_gb18030_string &rArr; hzbmp16 &rArr; decompressbmp16 &rArr; unziphfmex &rArr; r_dat_bat &rArr; SpiSentByte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_handle
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_complete_handle
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_handle
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_changeline_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cos_ver_ans_handle
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_ans_handle
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_COSData_2_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>

<P><STRONG><a name="[134]"></a>packed_data_frame</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, uartprotocol.o(i.packed_data_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = packed_data_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_to_cos
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_val_to_cos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_resend_to_cos
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>

<P><STRONG><a name="[20f]"></a>save_cos_ver_ans_handle</STRONG> (Thumb, 100 bytes, Stack size 144 bytes, uartprotocol.o(i.save_cos_ver_ans_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = save_cos_ver_ans_handle &rArr; etWrite_KEYID_to_flash &rArr; etSpim1NorFlashPageProgrameStdMode &rArr; etSpim1CheckNorFlashWriteEnable &rArr; etSpim1CheckNorFlashBusy &rArr; SpiSent_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etSpim1ReadNorFlashStdMode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etWrite_KEYID_to_flash
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[eb]"></a>send_ack</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, uartprotocol.o(i.send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = send_ack &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packed_data_frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>

<P><STRONG><a name="[e9]"></a>uart_recv_data</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uartprotocol.o(i.uart_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_recv_data &rArr; get_cos_data_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cos_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseRecvUartData
</UL>

<P><STRONG><a name="[1a0]"></a>uart_resend_to_cos</STRONG> (Thumb, 158 bytes, Stack size 72 bytes, uartprotocol.o(i.uart_resend_to_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_resend_to_cos &rArr; send_key_val_to_cos &rArr; cos_send_string &rArr; simple_uart_putstringbuff
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_val_to_cos
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cos_ver_req
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bt_name_req
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ans_work_state_handle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packed_data_frame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_resend_tag
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_command
</UL>

<P><STRONG><a name="[123]"></a>_fp_digits</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[122]"></a>_printf_core</STRONG> (Thumb, 1766 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[126]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[125]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
